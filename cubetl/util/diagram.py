import logging
import json
from cubetl.core import Node
from cubetl.olap.sql import SQLFactMapper, SQLEmbeddedDimensionMapper
from cubetl.olap import FactMapper, DimensionMapper

# Get an instance of a logger
logger = logging.getLogger(__name__)

class ConfigGraphWriter(Node):
    
    # jsgraph and mako
    
    def __init__(self):
        
        super(ConfigGraphWriter, self).__init__()
        
        self.olapmapper = None
    
    def initialize(self, ctx):
        super(ConfigGraphWriter, self).initialize(ctx)
        ctx.comp.initialize(self.olapmapper)
        
    def finalize(self, ctx):
        super(ConfigGraphWriter, self).finalize(ctx)
        ctx.comp.finalize(self.olapmapper)

    def _export_cube(self, ctx, model, mapper):
        
        cube = {}
        cube["name"] = mapper.fact.name
        cube["label"] = mapper.fact.name
        cube["dimensions"] = [dim.name for dim in mapper.fact.dimensions]
        cube["mappings"] = {}
        
        # Add measures
        cube["measures"] = []
        for measure in mapper.fact.measures:
            c_measure = {}
            c_measure["name"] = measure["name"]
            c_measure["aggregations"] = ["sum", "avg", "max", "min"]
            cube["measures"].append(c_measure)
        
        # Joins
        cube["joins"] = []
        for dim in mapper.fact.dimensions:
            fieldmapping = [ mapping for mapping in mapper.mappings if mapping["name"] == dim.name][0]
            dimmapper = self.olapmapper.getDimensionMapper(dim)
            if (not isinstance(dimmapper, SQLEmbeddedDimensionMapper)):
                if (ctx.debug2): logger.debug ("Exporting join for dimension %s for cube %s" % (dim.name, mapper.fact.name))
                join = {}
                join["master"] = mapper.table + "." + fieldmapping["column"]
                join["detail"] = dimmapper.table + "." + dimmapper.pk(ctx)["column"]
                join["alias"] = dimmapper.table
                cube["joins"].append(join)
            
        # Mappings
        for dim in mapper.fact.dimensions:
            dimmapper = self.olapmapper.getDimensionMapper(dim)
            if (not isinstance(dimmapper, SQLEmbeddedDimensionMapper)):
                for mapping in dimmapper.mappings:
                    cube["mappings"][dim.name + "." + mapping["name"]] = dimmapper.table + "." + mapping["column"]
            else:
                for mapping in dimmapper.mappings:
                    cube["mappings"][dim.name + "." + mapping["name"]] = mapper.table + "." + mapping["column"]
         
        
        model["cubes"].append(cube)

    def _export_dimension(self, ctx, model, mapper):
        
        dim = {}
        dim["comment"] = "Generated by CubETL"
        dim["name"] = mapper.dimension.name 
        dim["label"] = mapper.dimension.label
        dim["levels"] = []

        # Attributes are levels 
        for attrib in mapper.dimension.attributes:
            level = {}
            level["name"] = attrib["name"]
            level["label"] = attrib["label"]
            if (isinstance(mapper, SQLEmbeddedDimensionMapper)):
                level["attributes"] = [ mapping["name"] for mapping in mapper.mappings ]
                #level["key"] = mapper.pk(ctx)["name"]
            else:
                level["attributes"] = [ mapper.pk(ctx)["name"], attrib["name"] ]
                level["key"] = mapper.pk(ctx)["name"]
            level["label_attribute"] = attrib["name"]
            dim["levels"].append(level)
        
        model["dimensions"].append(dim)

    def _exportmapper(self, ctx, model, mapper):
        if (isinstance(mapper, DimensionMapper)):
            self._export_dimension(ctx, model, mapper)
        if (isinstance(mapper, FactMapper)):
            self._export_cube(ctx, model, mapper)
            
    def _exportolapmapper(self, ctx, model, olapmapper):
        
        # Call includes
        for inc in olapmapper.include:
            self._exportolapmapper(ctx, model, inc)

        # Fill mappings
        for mapper in olapmapper.mappings:
            self._exportmapper(ctx, model, mapper)
        
    
    def process(self, ctx, m):
        
        model = { 
                 "dimensions": [], 
                 "cubes": [] 
                 }
        
        self._exportolapmapper(ctx, model, self.olapmapper)
        
        # Prepare result
        m["cubesmodel"] = model
        m["cubesmodel_json"] = json.dumps(model, indent=4, sort_keys=True)
        print m["cubesmodel_json"]
        
        
        yield m
        
        