# This is a CubETL example configuration file.
# More info: https://github.com/jjmontesl/cubetl

# To generate a new config, use:
#
#   cubetl cubetl.config.create -p config.name=myproject
#
# Options:
#   -p config.name=name Name of the ETL process.
#   -p config.path=path Path to the generated config file.


import datetime

from cubetl import text, flow, fs, script, olap, pcaxis, table
from cubetl.cubes import cubes10
from cubetl.olap import sqlschema
from cubetl.olap.sql import TableMapper
from cubetl.sql import sql
from cubetl.table import cache
from cubetl.util import log


def cubetl_config(ctx):

    ctx.include('${ ctx.library_path }/datetime.py')


    # SQL backends configuration
    ctx.add('myproject.sql.connection',
            sql.Connection(url='sqlite:///myproject.sqlite3'))


    # OLAP schema configuration
    # On larger projects, it is recommended to move schema entities
    # to separate config files and include them here.

    ctx.add('myproject.mydimension.table', table.CSVMemoryTable(
        data='''
            key,label,icon
            1,High,arrow-up
            2,Low,arrow-down
        '''))

    ctx.add('myproject.mydimension', olap.Dimension(
        name='mydimension',
        label='My Dimension',
        attributes=[olap.Attribute('mydimension', type='String')]))

    ctx.add('ine.autonomyprovince', olap.HierarchyDimension(
        name='autonomyprovince',
        label='Province',
        levels=[ctx.get('ine.autonomy'),
                ctx.get('ine.province')]))

    ctx.add('myproject.myfact', olap.Fact(
        name='fact',
        label='Fact',
        #must_slice=ctx.get('cubetl.datetime.datemonthly'),  # study when and how dimensions can be aggregated, this cube requires slicing by date or results are invalid
        #natural_key=
        #notes='',
        dimensions=[#olap.Attribute('sample_date', label="Date", entity=ctx.get('cubetl.datetime.datemonthly')),
                    ctx.get('cubetl.datetime.datemonthly'),
                    ctx.get('ine.autonomyprovince'),
                    ctx.get('ine.nationality'),
                    ctx.get('cubetl.person.gender'),
                    ctx.get('cubetl.person.age_range')],
        measures=[olap.Measure(name='census', type='Integer', label="Population")]))  # TODO: Should not present avg/max/min

    # Generate a SQL star schema and mappings automatically
    sqlschema.OlapSQLSchema.generate_star_schema_mapper(ctx,
                                                        connection=ctx.get('ine.sql.connection'))
    ctx.get('olap2sql.olapmapper').entity_mapper(ctx.get('ine.census')).store_mode = TableMapper.STORE_MODE_INSERT


    # Sample process
    ctx.add('myproject.process', flow.Chain(steps=[

        # Print config (same as calling `cubetl myproject.py cubetl.config.print`)
        ctx.get('cubetl.config.print'),

        # Generate a Cubes model
        cubes10.Cubes10ModelWriter(olapmapper=ctx.get('olap2sql.olapmapper'),
                                   model_path="ine.model.json"),
        #cubes10.Cubes10ModelWriter(config_path="ine.slicer.ini"),
        script.Delete(['cubesmodel', 'cubesmodel_json']),

        sql.Transaction(connection=ctx.get('ine.sql.connection')),

        fs.FileLineReader(path='census-1971.px', encoding=None),
        csv.CSVReader(),

        flow.Chain(fork=True, steps=[

            flow.Filter(condition="${ m['Sexo'] != 'Ambos sexos' }"),
            #flow.Filter(condition="${ m['Grupo quinquenal de edad'] != 'Total' }"),
            flow.Filter(condition="${ m['Grupo de edad'] != 'Total' }"),
            #flow.Filter(condition="${ m['Nacionalidad'] != 'Total' }"),
            flow.Filter(condition="${ m['Provincias'] != 'Total Nacional' }"),

            #flow.Skip(skip="${ random.randint(1, 1000) }"),
            #flow.Limit(limit=5000),

            script.Function(process_data),

            flow.Filter(condition="${ m['date'].year < 2002 }"),

            cache.CachedTableLookup(
                table=ctx.get("ine.autonomy_province.table"),
                lookup={'province': lambda m: m['province_name']}),

            ctx.get('cubetl.util.print'),

            #olap.Store(entity=ctx.get('ine.autonomy'),
            #           mapper=ctx.get('olap2sql.olapmapper')),
            #olap.Store(entity=ctx.get('ine.province'),
            #           mapper=ctx.get('olap2sql.olapmapper')),
            #olap.Store(entity=ctx.get('ine.autonomyprovince'),
            #           mapper=ctx.get('olap2sql.olapmapper')),
            olap.Store(entity=ctx.get('ine.census'),
                       mapper=ctx.get('olap2sql.olapmapper')),


            log.LogPerformance(),

            ]),

        ]))


def process_data(ctx, m):

    m['date'] = datetime.datetime(int(m['Periodo'].split(" ")[-1]), 7 if 'julio' in m['Periodo'] else 1, 1)
    m['nationality'] = m.get('Nacionalidad', 'Unknown')
    m['age_range'] = m.get('Grupo quinquenal de edad', None) or m.get('Grupo de edad')
    m['census'] = m['value']

    # For autonomy dimension
    m['province_name'] = " ".join(m['Provincias'].split(' ')[1:])
    m['province_id'] = m['Provincias'].split(' ')[0]

    # For date dimension
    m['year'] = m['date'].year
    m['quarter'] = int((m["date"].month - 1) / 3) + 1
    m['month'] = m['date'].month

    # For gender dimension
    m['gender'] = m['Sexo']
    m['color'] = None
    m['icon'] = None

    del(m['Provincias'])
    #del(m['Nacionalidad'])
    del(m['Periodo'])
    #del(m['Grupo quinquenal de edad'])
    del(m['Grupo de edad'])
    del(m['Sexo'])
    del(m['value'])

