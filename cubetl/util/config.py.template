# This is a CubETL example configuration file.
# More info: https://github.com/jjmontesl/cubetl

# To generate a new config, use:
#
#   cubetl cubetl.config.create -p config.name=myproject
#
# Options:
#   -p config.name=name Name of the ETL process.
#   -p config.path=path Path to the generated config file.


import datetime

from cubetl import text, flow, fs, script, olap, pcaxis, table
from cubetl.cubes import cubes10
from cubetl.olap import sqlschema
from cubetl.olap.sql import TableMapper
from cubetl.sql import sql
from cubetl.table import cache
from cubetl.util import log


def cubetl_config(ctx):

    # Include other files (from library or custom)

    ctx.include('${ ctx.library_path }/datetime.py')


    # SQL backends configuration

    ctx.add('{{ ctx.props['config.name'] }}.sql.connection',
            sql.Connection(url='sqlite:///{{ ctx.props['config.name'] }}.sqlite3'))


    # OLAP schema configuration
    # On larger projects, it is recommended to move schema entities
    # to separate config files and include them here.

    ctx.add('{{ m['config_name'] }}.mydimension.table', table.CSVMemoryTable(
        data='''
            key,label,icon
            1,High,arrow-up
            2,Low,arrow-down
        '''))

    ctx.add('{{ m['config_name'] }}.mydimension', olap.Dimension(
        name='mydimension',
        label='My Dimension',
        attributes=[olap.Attribute('mydimension', type='String')]))

    ctx.add('{{ m['config_name'] }}.myfact', olap.Fact(
        name='myfact',
        label='My Fact',
        attributes=[]))


    # Generate a SQL star schema and mappings automatically
    sqlschema.OLAPToSQL.olap2sql(ctx, connection=ctx.get('{{ m['config_name'] }}.sql.connection'))
    ctx.get('olap2sql.olapmapper').entity_mapper(ctx.get('{{ m['config_name'] }}.myfact')).store_mode = TableMapper.STORE_MODE_INSERT


    # Sample process
    ctx.add('{{ m['config_name'] }}.process', flow.Chain(steps=[

        # Print config (same as calling `cubetl myproject.py cubetl.config.print`)
        #ctx.get('cubetl.config.print'),

        # Generate a Cubes model
        cubes10.Cubes10ModelWriter(olapmapper=ctx.get('olap2sql.olapmapper'),
                                   model_path="{{ m['config_name'] }}.cubes-model.json",
                                   config_path="{{ m['config_name'] }}.cubes-server.ini",),
        script.Delete(['cubesmodel', 'cubesmodel_json']),

        sql.Transaction(connection=ctx.get('{{ m['config_name'] }}.sql.connection')),

        script.Function(process_data),

        ctx.get('cubetl.util.print'),

        #olap.Store(entity=ctx.get('ine.census'),
        #           mapper=ctx.get('olap2sql.olapmapper')),

        log.LogPerformance(),

        ]))


def process_data(ctx, m):
    m['test'] = "Test"

