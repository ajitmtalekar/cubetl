[HEAD]

    * File poll mode, file follow mode, stream mode (StandardInputReader)...
    * Implement batch inserts, test performance (BufferedInsertsSQLTable).
    * Threading considerations
    * Django app, and automatic integration with models
    * Unit tests / integration tests
    * Packaging: pip * deb (review build scripts, etc)
    * Twitter API library (yaml)
    * Finer logging configuration, categories... via config too.
    * Good exception management and exception hierarchy

    * GeoIP / Address / DNS / UserAgent shall be lookups (GeoIP installation fails on Windows via pip: move to cubetl-geo)?
    * Geocoding

    * CSVReader shall work with a stream, and optionally accept a whole file as variable (review)

    * Implement mail log parsing (separate project: cubelogs)
    * Implement apache log parsing (separate project: cubelogs)
    * Implement VFS module (remove fs module if performance is ok).

    * Cubes10 export ordering of joins (masters to bottom) ? check
    * Cubes10 export of FactDimension: not include as dimension, mappings for embedded attributes without table prefix ? check
    * Cubes10 export of FactDimension: do not export as dimension ? check
    * Cubes10 export of measures and aggregations ? check

    * WAMP client application (view flow, capture/show next message, inject/test messages on arbitrary nodes, view states)
      Shortcut: serve application
    * WAMP connector
    * Orchestrate message passing externally.

    * Finish and add example for template support (mako)

    * Inspect a dataset (attribute, column, w/ support for multiple columns...) and identify metadata (incl. names, etc).
      based on metadata, validations, formatting, and sample data.

    * Publish?
    * Internal and External documentation (possibly best after config and examples exist)
    * Include system is order-dependant, because of !refs (check YAML references / lazy refs/proxies / ... ?).
    * Load includes once.
    * Correct entry point, setup.py, path considerations.
    * Include library through library path.

[NEXT]

  * New generation refactor: import SQL to OLAP -> Cubes + CubETLOLAPQuery

  * Remove YAML? keep config declarative
  * Remove __init__ and move back modules if they are small.
  * Sql-to-cubetl (tables and types) then to OLAP
  * Then, instance an olap sql-to-olap (process tables and columns, generate olap and olap mappings)
  * Implement querying
  * Move these SQL/OLAP method to Cubetl components.
  * Normalize/formalize column/name/id/schema/database naming ("name" (can contain dots), "id"?)

  * Data type system (could explore data in messages, SQL columns/rows, etc...), used to detect column types and formatting.
    Used by any process that wants to use it, used by sql2cubetl and sql2olap.
    Support detection, validation, formatting, transformation + unit conversion, icons (for type and values), i18n (for type and values)...

  # (optionally, at the end, export to cubes)
  # (should theorically be able to create olap-2-star-schema mappings, then create tables and load)
  # (theorically, we should be able to generate the same mappings from the generated star-schema (would require identifying split dims/hierarchies)

  * Use pk() and mappings() (currently one is private, but it's the public interface)
  * Rename mappings() to "mappings_query", "mappings_join", "mappings_store" or whatever is needed...


